import disnake
from disnake.ext import commands
import random
from untils.databases import UsersDataBase

class Slots(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = UsersDataBase()

    @commands.slash_command(name='slots', description='–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã')
    @commands.cooldown(1,30, commands.BucketType.user)
    async def slots(self, interaction, —Å—Ç–∞–≤–∫–∞: int = commands.Param(description='–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É', gt=50, le=10000)):
        await self.db.create_table()
        member = interaction.author
        await self.db.add_user(member)

        user = await self.db.get_user(member)
        if user[1] < —Å—Ç–∞–≤–∫–∞:
            embed = disnake.Embed(color=0x2F3136)
            embed.description = f'{interaction.author.mention} —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏.'
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        fruits = ['üçá', 'üçä', 'üçã', 'üçâ', 'üçå']

        
        slot_results = [random.choice(fruits) for _ in range(3)]
        result_str = ' | '.join(slot_results)

        
        if len(set(slot_results)) == 1:
            
            boost = f'x{random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])}'
            won_amount = —Å—Ç–∞–≤–∫–∞ * int(boost[1:])
            embed_description = f'> {interaction.author.mention}, –≤—ã **–≤—ã–∏–≥—Ä–∞–ª–∏**, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ **{won_amount}**\n> –í–∞—à –º–Ω–æ–∂–∏—Ç–µ–ª—å: **{boost}**'
            await self.db.update_money(member, won_amount)
            await self.db.add_transaction(interaction.author.id, won_amount,"–í—ã–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç–∞—Ö")
        elif len(set(slot_results)) == 2:
            
            boost = 'x1'
            won_amount = —Å—Ç–∞–≤–∫–∞ * int(boost[1:])
            embed_description = f'> {interaction.author.mention}, –≤—ã **–≤—ã–∏–≥—Ä–∞–ª–∏**, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ **{won_amount}**\n> –í–∞—à –º–Ω–æ–∂–∏—Ç–µ–ª—å: **{boost}**'
            await self.db.update_money(member, won_amount)
            await self.db.add_transaction(interaction.author.id, won_amount,"–í—ã–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç–∞—Ö")
        else:
            
            embed_description = f'> {interaction.author.mention}, –≤—ã –ø—Ä–æ–≥—Ä–∞–ª–∏: **{—Å—Ç–∞–≤–∫–∞}**'
            await self.db.add_transaction(interaction.author.id, -—Å—Ç–∞–≤–∫–∞,"–ü—Ä–æ–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç–∞—Ö")
            await self.db.update_money(member, -—Å—Ç–∞–≤–∫–∞)

        embed = disnake.Embed()
        server_avatar_url = interaction.guild.icon.url if interaction.guild.icon else None
        embed.set_author(name="Cat | –°–ª–æ—Ç—ã", icon_url=server_avatar_url)
        embed.set_thumbnail(url=interaction.author.display_avatar.url)
        embed.add_field(name=f'``` {result_str} ```', value="‚†Ä", inline=False)
        embed.description = embed_description
        await interaction.response.send_message(embed=embed)
        
    @slots.error  
    async def slots_error(self, inter, error):
        member = inter.author
        if isinstance(error, commands.CommandOnCooldown):
            seconds_left = error.retry_after
            embed = disnake.Embed(color=0x2F3136)
            server_avatar_url = inter.guild.icon.url if inter.guild.icon else None
            embed.set_author(name="Cat | Slots", icon_url=server_avatar_url)
            embed.set_thumbnail(url=inter.author.display_avatar.url)
            embed.add_field(name=f'', value=f'> {member.mention}, –≤—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ **{seconds_left:.2f}** —Å–µ–∫—É–Ω–¥')
            embed.set_thumbnail(url=member.display_avatar.url)
            await inter.response.send_message(embed=embed, ephemeral = True)    

def setup(bot):
    bot.add_cog(Slots(bot))
