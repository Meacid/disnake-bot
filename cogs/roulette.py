import disnake
from disnake.ext import commands
import random
import asyncio
from untils.databases import UsersDataBase



class Roulette(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = UsersDataBase()
        self.colors = {
            '–∫—Ä–∞—Å–Ω—ã–π': {'emoji': 'üî¥', 'multiplier': 2, 'chance': 0.45, 'numbers': [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36]},
            '—á–µ—Ä–Ω—ã–π': {'emoji': '‚ö´', 'multiplier': 2, 'chance': 0.45, 'numbers': [2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35]},
            '–∑–µ–ª–µ–Ω—ã–π': {'emoji': 'üü¢', 'multiplier': 15, 'chance': 0.15, 'numbers': [0]}
        }
        self.streak_multipliers = {
            2: 1.2,  
            3: 1.5,  
            4: 2.0, 
            5: 3.0   
        }
        self.user_streaks = {}

    @commands.slash_command(name='roulette', description='–ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É')
    @commands.cooldown(1, 30, commands.BucketType.user)
    async def roulette(
        self,
        interaction: disnake.ApplicationCommandInteraction,
        —Å—Ç–∞–≤–∫–∞: int = commands.Param(description='–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É', gt=50, le=10000),
        —Ü–≤–µ—Ç: str = commands.Param(
            description='–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç (–∫—Ä–∞—Å–Ω—ã–π √ó2, —á–µ—Ä–Ω—ã–π √ó2, –∑–µ–ª–µ–Ω—ã–π √ó14)',
            choices=['–∫—Ä–∞—Å–Ω—ã–π', '—á–µ—Ä–Ω—ã–π', '–∑–µ–ª–µ–Ω—ã–π']
        )
    ):
        await self.db.create_table()
        member = interaction.author
        await self.db.add_user(member)

        user = await self.db.get_user(member)
        if user[1] < —Å—Ç–∞–≤–∫–∞:
            embed = disnake.Embed(color=0x2F3136)
            embed.description = f'{interaction.author.mention} —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏.'
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        
        embed = disnake.Embed(color=0x2F3136)
        server_avatar_url = interaction.guild.icon.url if interaction.guild.icon else None
        embed.set_author(name="Cat | –†—É–ª–µ—Ç–∫–∞", icon_url=server_avatar_url)
        embed.set_thumbnail(url=interaction.author.display_avatar.url)

        
        await interaction.response.send_message(embed=embed)
        message = await interaction.original_message()

        
        for _ in range(3):
            number = random.randint(0, 36)
            color = next(color for color, data in self.colors.items() if number in data['numbers'])
            spinning_display = f"{self.colors[color]['emoji']} {number}"
            
            embed.clear_fields()
            embed.add_field(
                name="–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...",
                value=f'```{spinning_display}```',
                inline=False
            )
            await message.edit(embed=embed)
            await asyncio.sleep(0.7)

        
        result = random.random()
        if result < self.colors['–∑–µ–ª–µ–Ω—ã–π']['chance']:
            winning_color = '–∑–µ–ª–µ–Ω—ã–π'
            winning_number = 0
        elif result < self.colors['–∑–µ–ª–µ–Ω—ã–π']['chance'] + self.colors['–∫—Ä–∞—Å–Ω—ã–π']['chance']:
            winning_color = '–∫—Ä–∞—Å–Ω—ã–π'
            winning_number = random.choice(self.colors['–∫—Ä–∞—Å–Ω—ã–π']['numbers'])
        else:
            winning_color = '—á–µ—Ä–Ω—ã–π'
            winning_number = random.choice(self.colors['—á–µ—Ä–Ω—ã–π']['numbers'])

        
        if winning_color == —Ü–≤–µ—Ç:
            
            if member.id not in self.user_streaks:
                self.user_streaks[member.id] = 1
            else:
                self.user_streaks[member.id] += 1

            
            streak = self.user_streaks[member.id]
            streak_multiplier = self.streak_multipliers.get(streak, 1.0)
            
            base_amount = —Å—Ç–∞–≤–∫–∞ * self.colors[—Ü–≤–µ—Ç]['multiplier']
            won_amount = int(base_amount * streak_multiplier)
            
            streak_bonus = f"\n> –°–µ—Ä–∏—è –ø–æ–±–µ–¥: **{streak}**\n> –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: **x{streak_multiplier}**" if streak > 1 else ""
            embed_description = f'> {interaction.author.mention}, –≤—ã **–≤—ã–∏–≥—Ä–∞–ª–∏**!\n> –í—ã–ø–∞–ª–æ: {self.colors[winning_color]["emoji"]} **{winning_number}**\n> –í–∞—à –≤—ã–∏–≥—Ä—ã—à: **{won_amount}**{streak_bonus}'
            
            await self.db.update_money(member, won_amount)
            await self.db.add_transaction(interaction.author.id, won_amount, "–í—ã–∏–≥—Ä—ã—à –≤ —Ä—É–ª–µ—Ç–∫–µ")
        else:
            
            self.user_streaks[member.id] = 0
            embed_description = f'> {interaction.author.mention}, –≤—ã **–ø—Ä–æ–∏–≥—Ä–∞–ª–∏**!\n> –í—ã–ø–∞–ª–æ: {self.colors[winning_color]["emoji"]} **{winning_number}**\n> –ü–æ—Ç–µ—Ä—è–Ω–æ: **{—Å—Ç–∞–≤–∫–∞}**'
            await self.db.update_money(member, -—Å—Ç–∞–≤–∫–∞)
            await self.db.add_transaction(interaction.author.id, -—Å—Ç–∞–≤–∫–∞, "–ü—Ä–æ–∏–≥—Ä—ã—à –≤ —Ä—É–ª–µ—Ç–∫–µ")

        
        embed.description = embed_description
        embed.clear_fields()
        embed.add_field(
            name="–†–µ–∑—É–ª—å—Ç–∞—Ç",
            value=f'```–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {—Å—Ç–∞–≤–∫–∞}\n–í–∞—à —Ü–≤–µ—Ç: {self.colors[—Ü–≤–µ—Ç]["emoji"]}\n–í—ã–ø–∞–ª–æ: {self.colors[winning_color]["emoji"]} {winning_number}```',
            inline=False
        )

        await message.edit(embed=embed)

    @roulette.error
    async def roulette_error(self, inter, error):
        if isinstance(error, commands.CommandOnCooldown):
            embed = disnake.Embed(color=0x2F3136)
            server_avatar_url = inter.guild.icon.url if inter.guild.icon else None
            embed.set_author(name="Cat | –†—É–ª–µ—Ç–∫–∞", icon_url=server_avatar_url)
            embed.set_thumbnail(url=inter.author.display_avatar.url)
            embed.add_field(
                name='',
                value=f'> {inter.author.mention}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ **{error.retry_after:.2f}** —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π'
            )
            await inter.response.send_message(embed=embed, ephemeral=True)

def setup(bot):
    bot.add_cog(Roulette(bot))
